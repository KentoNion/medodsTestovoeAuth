// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen --source service.go --destination mock/auth_store.go AuthStore
//

// Package mock_auth is a generated GoMock package.
package mock

import (
	context "context"
	pkg "medodsTestovoe/auth/pkg"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthStore is a mock of AuthStore interface.
type MockAuthStore struct {
	ctrl     *gomock.Controller
	recorder *MockAuthStoreMockRecorder
}

// MockAuthStoreMockRecorder is the mock recorder for MockAuthStore.
type MockAuthStoreMockRecorder struct {
	mock *MockAuthStore
}

// NewMockAuthStore creates a new mock instance.
func NewMockAuthStore(ctrl *gomock.Controller) *MockAuthStore {
	mock := &MockAuthStore{ctrl: ctrl}
	mock.recorder = &MockAuthStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthStore) EXPECT() *MockAuthStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAuthStore) Delete(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthStoreMockRecorder) Delete(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthStore)(nil).Delete), ctx, userID)
}

// Get mocks base method.
func (m *MockAuthStore) Get(ctx context.Context, userID string) (pkg.Hash, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(pkg.Hash)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockAuthStoreMockRecorder) Get(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAuthStore)(nil).Get), ctx, userID)
}

// Save mocks base method.
func (m *MockAuthStore) Save(ctx context.Context, token pkg.Hash, userID, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, token, userID, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAuthStoreMockRecorder) Save(ctx, token, userID, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAuthStore)(nil).Save), ctx, token, userID, ip)
}

// Mocknotifier is a mock of notifier interface.
type Mocknotifier struct {
	ctrl     *gomock.Controller
	recorder *MocknotifierMockRecorder
}

// MocknotifierMockRecorder is the mock recorder for Mocknotifier.
type MocknotifierMockRecorder struct {
	mock *Mocknotifier
}

// NewMocknotifier creates a new mock instance.
func NewMocknotifier(ctrl *gomock.Controller) *Mocknotifier {
	mock := &Mocknotifier{ctrl: ctrl}
	mock.recorder = &MocknotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocknotifier) EXPECT() *MocknotifierMockRecorder {
	return m.recorder
}

// NotifyNewLogin mocks base method.
func (m *Mocknotifier) NotifyNewLogin(ctx context.Context, userID, oldIP, newIP string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyNewLogin", ctx, userID, oldIP, newIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyNewLogin indicates an expected call of NotifyNewLogin.
func (mr *MocknotifierMockRecorder) NotifyNewLogin(ctx, userID, oldIP, newIP any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyNewLogin", reflect.TypeOf((*Mocknotifier)(nil).NotifyNewLogin), ctx, userID, oldIP, newIP)
}
