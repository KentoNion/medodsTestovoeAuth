// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen --source service.go --destination mock/auth_store.go AuthStore
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	pkg "medodsTestovoe/auth/pkg"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockauthStore is a mock of authStore interface.
type MockauthStore struct {
	ctrl     *gomock.Controller
	recorder *MockauthStoreMockRecorder
}

// MockauthStoreMockRecorder is the mock recorder for MockauthStore.
type MockauthStoreMockRecorder struct {
	mock *MockauthStore
}

// NewMockauthStore creates a new mock instance.
func NewMockauthStore(ctrl *gomock.Controller) *MockauthStore {
	mock := &MockauthStore{ctrl: ctrl}
	mock.recorder = &MockauthStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthStore) EXPECT() *MockauthStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockauthStore) Delete(ctx context.Context, token pkg.Refresh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockauthStoreMockRecorder) Delete(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockauthStore)(nil).Delete), ctx, token)
}

// Get mocks base method.
func (m *MockauthStore) Get(ctx context.Context, token pkg.Refresh) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockauthStoreMockRecorder) Get(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockauthStore)(nil).Get), ctx, token)
}

// Save mocks base method.
func (m *MockauthStore) Save(ctx context.Context, token pkg.Refresh, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, token, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockauthStoreMockRecorder) Save(ctx, token, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockauthStore)(nil).Save), ctx, token, userID)
}

// Mocknotifier is a mock of notifier interface.
type Mocknotifier struct {
	ctrl     *gomock.Controller
	recorder *MocknotifierMockRecorder
}

// MocknotifierMockRecorder is the mock recorder for Mocknotifier.
type MocknotifierMockRecorder struct {
	mock *Mocknotifier
}

// NewMocknotifier creates a new mock instance.
func NewMocknotifier(ctrl *gomock.Controller) *Mocknotifier {
	mock := &Mocknotifier{ctrl: ctrl}
	mock.recorder = &MocknotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocknotifier) EXPECT() *MocknotifierMockRecorder {
	return m.recorder
}

// NotifyNewLogin mocks base method.
func (m *Mocknotifier) NotifyNewLogin(ctx context.Context, userID, oldIP, newIP string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyNewLogin", ctx, userID, oldIP, newIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyNewLogin indicates an expected call of NotifyNewLogin.
func (mr *MocknotifierMockRecorder) NotifyNewLogin(ctx, userID, oldIP, newIP any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyNewLogin", reflect.TypeOf((*Mocknotifier)(nil).NotifyNewLogin), ctx, userID, oldIP, newIP)
}
